#!/usr/bin/env node

//  FlickrData API Server
//  Author:  Wu Cai
//  Description:  This FlickrAPI server allows users to connect to the Flickr Database and return values to explore on a mpa
//                for Workshop 8 - 9 of the course.
//  Notes:        This API assumes you have an SQL function called DISTANCE defined which can be created by running the following query in MySQL:

//  CREATE FUNCTION distance(a POINT, b POINT) RETURNS double DETERMINISTIC RETURN ifnull(acos(sin(X(a)) * sin(X(b)) + cos(X(a)) * cos(X(b)) * cos(Y(b) - Y(a))) * 6380, 0)

var moment = require('moment');

var portNumber = 8876;

var mysql = require('mysql');

// MySQL Connection Variables
var connection = mysql.createConnection({
  host     : 'dev.spatialdatacapture.org',
  user     : 'ucfncwu',
  password : 'qurikidiba',
  database : 'ucfncwu'
});

connection.connect();

//  Setup the Express Server
var express = require('express');
var app = express();
app.set('view engine', 'ejs');

// Provides the static folders we have added in the project to the web server.
app.use(express.static(__dirname + '/js'));
app.use(express.static(__dirname + '/css'));
app.use(express.static(__dirname + '/images'));

// Default API Endpoint - return the index.ejs file in the views folder
app.get('/', function(req, res) {
    return res.render('index');
})


//  API EndPoint to get data point centrality
app.get('/data/centrality/:time', function (req, res) {

      // Alows data to be downloaded from the server with security concerns
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      // If all the variables are provided connect to the database
      if(req.params.time != "" ){

                // Parse the values from the URL into numbers for the query
                var time = req.params.time;


                // SQL Statement to run
                var sql = "SELECT stations_ID, stations_name, Latitude, Longitude, cent_" + time +  " AS centrality FROM total;" ;

                // Log it on the screen for debugging
                console.log(sql);

                // Run the SQL Query
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                // If we have data that comes bag send it to the user.
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                // If all the URL variables are not passed send an empty string to the user
                res.send("");
        }
});

//  API EndPoint to get total flow
app.get('/data/flow', function (req, res) {

      // Alows data to be downloaded from the server with security concerns
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      // If all the variables are provided connect to the database


                // SQL Statement to run
                var time = "sum(in6) as '6:00', sum(in7) as '7:00', sum(in8) as '8:00', sum(in9) as '9:00', sum(in10) as '10:00', sum(in11) as '11:00', sum(in12) as '12:00', sum(in13) as '13:00',sum(in14) as '14:00', sum(in15) as '15:00', sum(in16) as '16:00', sum(in17) as '17:00', sum(in18) as '18:00', sum(in19) as '19:00', sum(in20) as '20:00', sum(in21) as '21:00' "

                var sql = "select " + time + " from total;" ;

                // Log it on the screen for debugging
                console.log(sql);

                // Run the SQL Query
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                // If we have data that comes bag send it to the user.
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
});

// API Endpoint to get data for specific photograph from database - /data/photoDescription/1234567
app.get('/data/stationDescription/:time/:stations_ID', function (req, res) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      if(req.params.stations_ID != "" && req.params.time != ""){
                var stations_ID = req.params.stations_ID;
                var time = req.params.time;
                if (time != 'all'){
                  var sql = "SELECT stations_ID, stations_name, stations_description, stations_year, cent_all as bwt, cent_" + time + " as eigen FROM total where stations_ID = '" + stations_ID + "';";
                }
                else{
                  var sql = "SELECT stations_ID, stations_name, stations_description, stations_year, cent_all as bwt, 'NA' as eigen FROM total where stations_ID = '" + stations_ID + "';";
                }

                console.log(sql);
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                res.send("");
        }
});

app.get('/data/flow/:stations_ID', function (req, res) {

      // Alows data to be downloaded from the server with security concerns
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      // If all the variables are provided connect to the database
      if(req.params.stations_ID != "" ){

                var stations_ID = req.params.stations_ID;


                // SQL Statement to run
                var sql = "select in6, in7, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, out6, out7, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21 from total where stations_ID = '" + stations_ID + "';";

                // Log it on the screen for debugging
                console.log(sql);

                // Run the SQL Query
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                // If we have data that comes bag send it to the user.
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                // If all the URL variables are not passed send an empty string to the user
                res.send("");
        }
});

app.get('/data/cen/:stations_ID', function (req, res) {

      // Alows data to be downloaded from the server with security concerns
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      // If all the variables are provided connect to the database
      if(req.params.stations_ID != "" ){

                var stations_ID = req.params.stations_ID


                // SQL Statement to run
                var sql = "select cent_6, cent_7, cent_8, cent_9, cent_10, cent_11, cent_12, cent_13, cent_14, cent_15, cent_16, cent_17, cent_18, cent_19, cent_20, cent_21 from total where stations_ID = '" + stations_ID + "';";

                // Log it on the screen for debugging
                console.log(sql);

                // Run the SQL Query
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                // If we have data that comes bag send it to the user.
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                // If all the URL variables are not passed send an empty string to the user
                res.send("");
        }
});

// API Endpoint to get data for specific photograph from database - /data/photoDescription/1234567
app.get('/data/intop/:time/:stations_ID', function (req, res) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      if(req.params.time != "" && req.params.stations_ID != ""){
                var time = parseInt(req.params.time);
                var stations_ID = req.params.stations_ID;

                var sql = "select ORIGIN_PT_NAME, TOTAL_TRIPS from origin where TIME_PER_HOUR = " + time + " and DESTINATION_PT_CODE = '" + stations_ID + "' order by TOTAL_TRIPS desc limit 1,5;";

                console.log(sql);
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                res.send("");
        }
});

app.get('/data/outtop/:time/:stations_ID', function (req, res) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-WithD");
      if(req.params.time != "" && req.params.stations_ID != ""){
                var time = parseInt(req.params.time);
                var stations_ID = req.params.stations_ID;

                var sql = "select DESTINATION_PT_NAME, TOTAL_TRIPS from origin where TIME_PER_HOUR = " + time + " and ORIGIN_PT_CODE = '" + stations_ID + "' order by TOTAL_TRIPS desc limit 1,5;";

                console.log(sql);
                connection.query(sql, function(err, rows, fields) {
                        if (err) console.log("Err:" + err);
                        if(rows != undefined){
                                res.send(rows);
                        }else{
                                res.send("");
                        }
                });
        }else{
                res.send("");
        }
});

// Setup the server and print a string to the screen when server is ready
var server = app.listen(portNumber, function () {
  var host = server.address().address;
  var port = server.address().port;
  console.log('App listening at http://%s:%s', host, port);
});

function mysql_real_escape_string (str) {
    return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
        switch (char) {
            case "\0":
                return "\\0";
            case "\x08":
                return "\\b";
            case "\x09":
                return "\\t";
            case "\x1a":
                return "\\z";
            case "\n":
                return "\\n";
            case "\r":
                return "\\r";
            case "\"":
            case "'":
            case "\\":
            case "%":
                return "\\"+char; // prepends a backslash to backslash, percent,
                                  // and double/single quotes
        }
    });
}
